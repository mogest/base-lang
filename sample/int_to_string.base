.fn_print_number
    # number_buffer_ptr points to number_buffer
    push number_buffer
    push number_buffer_ptr
    write

  .dec_next_digit
    duplicate

    # divide by 10
    push 10
    divide

    # write the result for next loop
    duplicate
    push next_number
    write

    # find the modulo
    push 10
    multiply
    subtract

    # convert to ASCII
    push 48
    add
    push number_buffer_ptr
    read
    write

    # next_number becomes our new number
    push next_number
    read

    # increment the pointer by 1
    push number_buffer_ptr
    read
    push 1
    add
    push number_buffer_ptr
    write

    # process the next digit if we're not at 0
    duplicate
    push dec_next_digit
    bgtz

  .print_next_digit
    # move the ptr back 1
    push number_buffer_ptr
    read
    push 1
    subtract
    duplicate
    push number_buffer_ptr
    write

    # read the ptr and print it out
    read
    out

    # if we're not back at the start yet, loop
    push number_buffer_ptr
    read
    push number_buffer
    subtract
    push print_next_digit
    bgtz

    # all done :)
    discard

    # return ip is on stack
    jump


.main
  # set return address
  push ip
  push 10
  add

  # call function
  push 472
  push fn_print_number
  jump

  # output newline
  push "\n"
  out
  halt

.next_number 0
.number_buffer_ptr 0
.number_buffer 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
